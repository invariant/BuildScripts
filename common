#!/bin/zsh
function display {
  notification=${1:-'notification'}
  title=${2:-'Build Script'}
  /usr/bin/osascript -e 'display notification "'$notification'" with title "'$title'" subtitle "shell code: '$?'"'
}

function sayhi {
  print
  print "* begin script: ${1:t}"
}

function saybye {
  print "* done: ${1:t} ($?)"
  print
}

function temp_root {
  print ${TMPDIR}/com.pilotmoon.build/
}

function unique_temp_dir {
  print $(temp_root)/$(uuidgen)
}

function memo_vars { # 1:file name
  if [[ -v PRODUCT_BUNDLE_IDENTIFIER ]]; then # sentinel var, it could be any build setting
    temp=$(unique_temp_dir)
    print "memo vars to:" $temp
    mkdir -p $temp && export > $temp/$1
  else
    vars_file=$(print $(temp_root)/*/$1(.oc[1]))
    print vars: $vars_file
    source $vars_file   
  fi
}

function string_in_array { # str, arr
  [[ ${2[(ie)$1]} -le ${#2} ]]
}

# store the password as follows (it must be an app specific pw from appleid.apple.com):
#   xcrun altool --store-password-in-keychain-item "AC_PASSWORD" -u <username> -p <secret_password>
# get provider shortname with 
#   xcrun altool --list-providers -u <username> -p "@keychain:AC_PASSWORD"
function altool { # call altool with login params
  xcrun altool --output-format json --username nick@reqr.net --password @keychain:AC_PASSWORD $*
}

function param { # get param path from json string
  local keypath
  for key in ${*[2,-1]}; do
    keypath=$keypath.${(qqq)key} # builds keypath such as ."foo"."bar"
  done
  echo $1 | jq -r $keypath
}

function jsonify { # output vars as json
  local result
  for name in $*; do
    result=($result ${(qqq)name}:${(qqq)${(P)name}})
  done
  echo "{${(j:,:)result}}" | jq
}

function jsonmerge { # print json file with merged params
  if ! [[ -f $1 ]]; then
    echo "jsonmerge: input file not found: $1"; exit 1
  fi
  local current 
  if ! current=$(jq < $1); then
    echo "jsonmerge: failed reading json file: $1"; exit 1
  fi
  local new
  new=$(jsonify ${*[2,-1]} | jq) 
  echo $current $new | jq -s '.[0] * .[1]'
}

function jsonsave { # save named params to file
  temp=$(jsonmerge ${=*})
  print $temp > $1
}

function jsonload { # get named params from file  
  local json=$(<$1)
  for name in ${*[2,-1]}; do
    val=$(echo $json | jq -r ".${(qqq)name}")
    if [[ -n $val && $val != null ]]; then
      eval $name=\$val
      show $name
    else 
      echo "[jsonload] missing parameter in ${1:t}: $name"
      return 1
    fi
  done
}

function show {
  for name in $*; do
    print -D $name: ${(P)name}
  done
}

function prompt {
    read "choice?$1 (y to continue, enter to skip): "
    case "${choice:l}" in      
      y|yes ) return 0;;
      * ) return 1;;
    esac
}

function askuser {
    read "choice?$1 (Type 'yes' to continue): "
    case "${choice:l}" in
      yes ) return 0;;
      no ) return 1;;
      * ) echo "I'll take that as a no."; return 1;;
    esac
}
